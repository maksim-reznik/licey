import os
import shutil
import matplotlib.pyplot as plt
import numpy as np
from pydub import AudioSegment

class SoundEditor:
    def __init__(self):
        self.files = {}
        self.viz_list = []
        self.track = AudioSegment.silent(duration=0)
        self.project_folder = 'sound_project'
        os.makedirs(self.project_folder, exist_ok=True)
        for f in os.listdir(self.project_folder):
            os.remove(os.path.join(self.project_folder, f))

    def import_file(self, file_path):
        if not os.path.isfile(file_path):
            print("Файл не существует.")
            return

        file_ext = os.path.splitext(file_path)[1].lower()
        if file_ext not in ['.wav', '.mp3']:
            print("Неподдерживаемый формат файла. Поддерживаются .wav и .mp3")
            return

        file_id = len(self.files) + 1
        new_file_path = os.path.join(self.project_folder, os.path.basename(file_path))
        shutil.copy(file_path, new_file_path)
        self.files[file_id] = new_file_path
        print(f"Файл {file_path} импортирован с ID {file_id}.")

    def list_files(self):
        for file_id, file_path in self.files.items():
            print(f"ID: {file_id}, Файл: {file_path}")

    def add_file(self, file_id, start_time):
        if file_id not in self.files:
            print("Файл с таким ID не существует.")
            return

        audio_segment = AudioSegment.from_file(self.files[file_id])
        self.track = self.track.overlay(audio_segment, position=start_time * 1000)
        self.viz_list.append((start_time, audio_segment.duration_seconds))
        print(f"Файл с ID {file_id} добавлен на {start_time} секунд(ы).")

    def delete_files_at(self, second):
        # Извлекаем сегменты
        segments = []
        current_time = 0
        duration_ms = len(self.track)

        while current_time < duration_ms:
            seg_end = current_time + 1000
            segments.append((current_time, self.track[current_time:seg_end]))
            current_time = seg_end

        # Удаляем сегменты, которые начинаются в заданной секунде
        self.track = AudioSegment.silent(duration=0)
        for start, segment in segments:
            if start // 1000 != second:
                self.track += segment
        self.viz_list = [i for i in self.viz_list if i[0] != second]
        print(f"Все файлы, начинающиеся в {second} секунду, удалены.")

    def clear(self):
        self.files.clear()
        self.track = AudioSegment.silent(duration=0)
        for f in os.listdir(self.project_folder):
            os.remove(os.path.join(self.project_folder, f))
        print("Все файлы удалены из проекта.")

    def visualize(self):
        segments = self.viz_list
        print(segments)
        y_positions = range(len(segments))

        # Создаем график
        plt.figure(figsize=(10, len(segments) + 6))

        # Отображаем отрезки на графике
        for y, (start, end) in zip(y_positions, segments):
            plt.hlines(y, start, end, color='b',
                       linewidth=10)

        plt.xlabel('Время (сэмплы)')
        plt.ylabel('№ ID')
        plt.yticks(y_positions, [f'Segment {i + 1}' for i in range(len(segments))])
        plt.title('Display of Numeric Segments')
        plt.grid(True)

        # Показать график
        plt.show()

def main():
    editor = SoundEditor()

    while True:
        command = input("Введите команду: ")
        parts = command.split()

        if parts[0] == '!import' and len(parts) == 2:
            editor.import_file(parts[1])
        elif parts[0] == '!list':
            editor.list_files()
        elif parts[0] == '!add' and len(parts) == 3:
            editor.add_file(int(parts[1]), int(parts[2]))
        elif parts[0] == '!del' and len(parts) == 2:
            editor.delete_files_at(int(parts[1]))
        elif parts[0] == '!hash':
            editor.clear()
        elif parts[0] == '!viz':
            editor.visualize()
        elif parts[0] == '!exit':
            editor.clear()
            print("Выход из программы.")
            break
        else:
            print("Неизвестная команда.")

if __name__ == '__main__':
    main()
